let player;\n\n// This function creates an <iframe> (and YouTube player)\n// after the API code downloads.\nfunction onYouTubeIframeAPIReady() {\n    player = new YT.Player(\'player\', {\n        height: \'0\', // Set height and width to 0 to hide the player visually\n        width: \'0\',\n        videoId: \'\', // Initially empty, will be set by loadVideo\n        playerVars: {\n            \'playsinline\': 1\n        },\n        events: {\n            \'onReady\': onPlayerReady,\n            \'onStateChange\': onPlayerStateChange\n        }\n    });\n}\n\n// The API will call this function when the video player is ready.\nfunction onPlayerReady(event) {\n    // Player is ready, but we don\'t autoplay here. We wait for the button click.\n    console.log("YouTube Player Ready.");\n}\n\n// The API calls this function when the player\'s state changes.\nfunction onPlayerStateChange(event) {\n    // You can add logic here if needed, e.g., when the video ends.\n    if (event.data == YT.PlayerState.PLAYING) {\n        console.log("Audio Playing");\n    }\n    if (event.data == YT.PlayerState.ENDED) {\n        console.log("Audio Ended");\n    }\n}\n\nfunction loadVideo() {\n    const linkInput = document.getElementById(\'youtubeLink\');\n    const url = linkInput.value;\n    const videoId = extractVideoID(url);\n\n    if (videoId && player) {\n        player.loadVideoById(videoId);\n        // Optionally mute the video visually if needed, though height/width 0 should hide it\n        // player.mute(); \n        player.playVideo(); // Start playing audio\n    } else {\n        alert("Please enter a valid YouTube link.");\n    }\n}\n\n// Helper function to extract video ID from various YouTube URL formats\nfunction extractVideoID(url) {\n    const regex = /(?:https?:\/\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/; // Non-capturing groups for domains, capturing group for ID\n    const match = url.match(regex);\n    return match ? match[1] : null;\n}\n\n// This code loads the IFrame Player API code asynchronously.\n// It\'s already included via script tag in index.html, \n// but this ensures the global function `onYouTubeIframeAPIReady` exists.\n// If the API is loaded first, it will call the function directly.\n// If the script loads first, the function will be defined for the API to call.\nif (typeof YT === \'undefined\' || typeof YT.Player === \'undefined\') {\n    // API not loaded yet, it will call onYouTubeIframeAPIReady when ready\n} else {\n    // API already loaded, call the function manually if needed\n    // In most cases, the API calls this automatically, but this can be a fallback.\n    // onYouTubeIframeAPIReady(); \n    // We rely on the API calling the function automatically.\n}\n 